{"version":3,"sources":["context/board/BoardContext.js","components/Square.js","components/Board.js","context/board/BoardReducer.js","types.js","context/board/BoardState.js","App.js","index.js"],"names":["boardContext","createContext","Square","props","cell","useContext","BoardContext","updateBoard","gameComplete","board","className","Button","onClick","Fade","in","fontSize","color","style","Icon","Board","xTurn","resetBoard","playerEndGame","useState","gameStatus","setGameStatus","compPlay","setCompPlay","renderSquare","i","hasPlayerWon","game","tie","forEach","element","isGameComplete","compTurn","comp","Math","floor","random","resetGame","useEffect","Container","variant","FormControlLabel","control","Checkbox","checked","onChange","event","target","label","state","action","type","payload","BoardState","useReducer","BoardReducer","dispatch","Provider","value","children","App","ReactDOM","render","document","getElementById"],"mappings":"iQAIeA,EAFMC,0B,0DCgDNC,EAzCA,SAAAC,GAAU,IACfC,EAASD,EAATC,KACFJ,EAAeK,qBAAWC,GACxBC,EAAqCP,EAArCO,YAAaC,EAAwBR,EAAxBQ,aAAcC,EAAUT,EAAVS,MA+BnC,OACE,yBAAKC,UAAU,UACb,kBAACC,EAAA,EAAD,CAAQC,QA/BU,YACfJ,EAAgC,KAAhBC,EAAML,IAAeG,EAAYH,KAIlC,MAAhBK,EAAML,GAEN,kBAACS,EAAA,EAAD,CAAMC,IAAI,GACR,kBAAC,IAAD,CACEC,SAAS,QACTC,MAAM,UACNC,MAAO,CAAEF,SAAU,OAIA,MAAhBN,EAAML,GAEb,kBAACS,EAAA,EAAD,CAAMC,IAAI,GACR,kBAAC,IAAD,CACEC,SAAS,QACTC,MAAM,UACNC,MAAO,CAAEF,SAAU,OAKlB,kBAACG,EAAA,EAAD,CAAMH,SAAS,QAAQC,MAAM,UAAUC,MAAO,CAAEF,SAAU,S,wBC8FxDI,EA9HD,WACZ,IAAMnB,EAAeK,qBAAWC,GAG9BG,EAMET,EANFS,MACAW,EAKEpB,EALFoB,MACAC,EAIErB,EAJFqB,WACAC,EAGEtB,EAHFsB,cACAd,EAEER,EAFFQ,aACAD,EACEP,EADFO,YATgB,EAYkBgB,mBAAS,KAZ3B,mBAYXC,EAZW,KAYCC,EAZD,OAacF,oBAAS,GAbvB,mBAaXG,EAbW,KAaDC,EAbC,KAeZC,EAAe,SAAAC,GACnB,OAAO,kBAAC,EAAD,CAAQzB,KAAMyB,EAAGT,MAAOA,KA0BjC,IAAMU,EAAe,WACnB,IAAIC,EAxBN,WACE,GACGtB,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,IAC1DA,EAAM,KAAOA,EAAM,GAAOA,EAAM,KAAOA,EAAM,GAAoB,KAAbA,EAAM,GAE3D,MAAO,MAEP,IAAIuB,GAAM,EAEV,OADAvB,EAAMwB,SAAQ,SAAAC,GAAO,MAAiB,KAAZA,EAAkBF,GAAM,EAAS,QACvDA,EACK,MAEA,SAMAG,GACE,QAATJ,GACFT,IAGIG,EAFHL,EAEiB,kBADA,oBAEA,QAATW,GACTT,IACAG,EAAc,SAEVL,EACFK,EAAc,kBAEdA,EAAc,kBAETjB,EAAekB,GAAUU,MAK9BA,EAAW,WAEf,IADA,IAAIC,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UACJ,KAAhB/B,EAAM4B,IACXA,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAEzBjC,EAAY8B,IAQRI,EAAY,WAChBpB,IACAI,EAAc,kBAQhB,OALAiB,qBAAU,WACHlC,GAAcsB,MAElB,CAACV,EAAOZ,IAGT,6BACE,kBAACmC,EAAA,EAAD,CAAWjC,UAAU,QACnB,yBAAKA,UAAU,QACb,4BAAKc,GACL,kBAACb,EAAA,EAAD,CAAQiC,QAAQ,YAAY5B,MAAM,UAAUJ,QAAS6B,GAArD,YAIF,kBAACI,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAAStB,EACTV,MAAM,UACNiC,SA7BS,SAAAC,GACnBT,IACAd,EAAYuB,EAAMC,OAAOH,YA6BnBI,MAAM,kBAER,yBAAK1C,UAAU,SACb,yBAAKA,UAAU,aACZkB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKlB,UAAU,aACZkB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKlB,UAAU,aACZkB,EAAa,GACbA,EAAa,GACbA,EAAa,Q,QC5HX,WAACyB,EAAOC,GACrB,OAAQA,EAAOC,MACb,KCJuB,EDKrB,OAAO,eACFF,EADL,CAEE5C,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCW,OAAO,EACPZ,cAAc,IAElB,KCRqB,EDSnB,OAAO,eACF6C,EADL,CAEEjC,MAAOkC,EAAOE,UAElB,KCfwB,EDgBtB,OAAO,eACFH,EADL,CAEE5C,MAAO6C,EAAOE,UAElB,KCnBoB,EDoBlB,OAAO,eACFH,EADL,CAEE7C,cAAc,IAGlB,QACE,OAAO6C,IEYEI,EAnCI,SAAAtD,GACjB,IAD0B,EAOAuD,qBAAWC,EANhB,CACnBlD,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCW,OAAO,EACPZ,cAAc,IAJU,mBAOnB6C,EAPmB,KAOZO,EAPY,KAsB1B,OACE,kBAAC,EAAaC,SAAd,CACEC,MAAK,eACAT,EADA,CAEHhC,WAjBa,kBAAMuC,EAAS,CAAEL,KDdX,KCgCnBhD,YAdc,SAAAsB,GAClB,IAAIpB,EAAQ4C,EAAM5C,MAClB4C,EAAMjC,MAASX,EAAMoB,GAAK,IAAQpB,EAAMoB,GAAK,IAC7C+B,EAAS,CAAEL,KDpBa,ECoBOC,QAAS/C,IALnBmD,EAAS,CAAEL,KDbX,ECa4BC,SAAUH,EAAMjC,SAiB7DE,cARgB,kBAAMsC,EAAS,CAAEL,KDvBjB,QCiCjBpD,EAAM4D,WCnBEC,EAXH,WACV,OACE,kBAAC,EAAD,KACE,yBAAKtD,UAAU,OACb,iCACA,kBAAC,EAAD,SCLRuD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.865a9a02.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst boardContext = createContext();\r\n\r\nexport default boardContext;\r\n","import React, { useContext } from 'react';\r\nimport BoardContext from '../context/board/BoardContext';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst Square = props => {\r\n  const { cell } = props;\r\n  const boardContext = useContext(BoardContext);\r\n  const { updateBoard, gameComplete, board } = boardContext;\r\n\r\n  const onClickSquare = () => {\r\n    if (!gameComplete & (board[cell] === '')) updateBoard(cell);\r\n  };\r\n\r\n  const getSquareIcon = () => {\r\n    if (board[cell] === 'X') {\r\n      return (\r\n        <Fade in={true}>\r\n          <CloseIcon\r\n            fontSize='large'\r\n            color='primary'\r\n            style={{ fontSize: 40 }}\r\n          />\r\n        </Fade>\r\n      );\r\n    } else if (board[cell] === 'O') {\r\n      return (\r\n        <Fade in={true}>\r\n          <RadioButtonUncheckedIcon\r\n            fontSize='large'\r\n            color='primary'\r\n            style={{ fontSize: 40 }}\r\n          />\r\n        </Fade>\r\n      );\r\n    } else\r\n      return <Icon fontSize='large' color='primary' style={{ fontSize: 40 }} />;\r\n  };\r\n\r\n  return (\r\n    <div className='square'>\r\n      <Button onClick={onClickSquare}>{getSquareIcon()}</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Square from '../components/Square';\r\nimport BoardContext from '../context/board/BoardContext';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst Board = () => {\r\n  const boardContext = useContext(BoardContext);\r\n\r\n  const {\r\n    board,\r\n    xTurn,\r\n    resetBoard,\r\n    playerEndGame,\r\n    gameComplete,\r\n    updateBoard\r\n  } = boardContext;\r\n\r\n  const [gameStatus, setGameStatus] = useState(' ');\r\n  const [compPlay, setCompPlay] = useState(true);\r\n\r\n  const renderSquare = i => {\r\n    return <Square cell={i} xTurn={xTurn} />;\r\n  };\r\n\r\n  function isGameComplete() {\r\n    if (\r\n      (board[0] === board[1]) & (board[1] === board[2]) & (board[0] !== '') ||\r\n      (board[3] === board[4]) & (board[3] === board[5]) & (board[3] !== '') ||\r\n      (board[6] === board[7]) & (board[7] === board[8]) & (board[6] !== '') ||\r\n      (board[0] === board[3]) & (board[0] === board[6]) & (board[0] !== '') ||\r\n      (board[1] === board[4]) & (board[1] === board[7]) & (board[1] !== '') ||\r\n      (board[2] === board[5]) & (board[2] === board[8]) & (board[2] !== '') ||\r\n      (board[0] === board[4]) & (board[0] === board[8]) & (board[0] !== '') ||\r\n      (board[6] === board[4]) & (board[6] === board[2]) & (board[6] !== '')\r\n    ) {\r\n      return 'WIN';\r\n    } else {\r\n      let tie = true;\r\n      board.forEach(element => (element === '' ? (tie = false) : null));\r\n      if (tie) {\r\n        return 'TIE';\r\n      } else {\r\n        return 'RESUME';\r\n      }\r\n    }\r\n  }\r\n\r\n  const hasPlayerWon = () => {\r\n    let game = isGameComplete();\r\n    if (game === 'WIN') {\r\n      playerEndGame();\r\n      !xTurn\r\n        ? setGameStatus('Player X Wins !')\r\n        : setGameStatus('Player O Wins !');\r\n    } else if (game === 'TIE') {\r\n      playerEndGame();\r\n      setGameStatus('Tie!');\r\n    } else {\r\n      if (xTurn) {\r\n        setGameStatus('Player X Turn');\r\n      } else {\r\n        setGameStatus('Player O Turn');\r\n        // computer's turn\r\n        if (!gameComplete & compPlay) compTurn();\r\n      }\r\n    }\r\n  };\r\n\r\n  const compTurn = () => {\r\n    let comp = Math.floor(Math.random() * 9);\r\n    while (board[comp] !== '') {\r\n      comp = Math.floor(Math.random() * 9);\r\n    }\r\n    updateBoard(comp);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    resetGame();\r\n    setCompPlay(event.target.checked);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    resetBoard();\r\n    setGameStatus('Player X Turn');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!gameComplete) hasPlayerWon();\r\n    // eslint-disable-next-line\r\n  }, [xTurn, gameComplete]);\r\n\r\n  return (\r\n    <div>\r\n      <Container className='game'>\r\n        <div className='menu'>\r\n          <h3>{gameStatus}</h3>\r\n          <Button variant='contained' color='primary' onClick={resetGame}>\r\n            Restart\r\n          </Button>\r\n        </div>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={compPlay}\r\n              color='primary'\r\n              onChange={handleChange}></Checkbox>\r\n          }\r\n          label='O is Computer'\r\n        />\r\n        <div className='board'>\r\n          <div className='board-row'>\r\n            {renderSquare(0)}\r\n            {renderSquare(1)}\r\n            {renderSquare(2)}\r\n          </div>\r\n          <div className='board-row'>\r\n            {renderSquare(3)}\r\n            {renderSquare(4)}\r\n            {renderSquare(5)}\r\n          </div>\r\n          <div className='board-row'>\r\n            {renderSquare(6)}\r\n            {renderSquare(7)}\r\n            {renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { RESET_BOARD, NEXT_TURN, UPDATE_BOARD, END_GAME } from '../../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case RESET_BOARD:\r\n      return {\r\n        ...state,\r\n        board: ['', '', '', '', '', '', '', '', ''],\r\n        xTurn: true,\r\n        gameComplete: false\r\n      };\r\n    case NEXT_TURN:\r\n      return {\r\n        ...state,\r\n        xTurn: action.payload\r\n      };\r\n    case UPDATE_BOARD:\r\n      return {\r\n        ...state,\r\n        board: action.payload\r\n      };\r\n    case END_GAME:\r\n      return {\r\n        ...state,\r\n        gameComplete: true\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const RESET_BOARD = 1;\r\nexport const UPDATE_BOARD = 2;\r\nexport const END_GAME = 3;\r\nexport const NEXT_TURN = 4;\r\n","import React, { useReducer } from 'react';\r\nimport BoardReducer from './BoardReducer';\r\nimport boardContext from './BoardContext';\r\nimport { RESET_BOARD, NEXT_TURN, UPDATE_BOARD, END_GAME } from '../../types';\r\n\r\nconst BoardState = props => {\r\n  const initialState = {\r\n    board: ['', '', '', '', '', '', '', '', ''],\r\n    xTurn: true,\r\n    gameComplete: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(BoardReducer, initialState);\r\n\r\n  const resetBoard = () => dispatch({ type: RESET_BOARD });\r\n\r\n  const nextTurn = () => dispatch({ type: NEXT_TURN, payload: !state.xTurn });\r\n\r\n  const updateBoard = i => {\r\n    let board = state.board;\r\n    state.xTurn ? (board[i] = 'X') : (board[i] = 'O');\r\n    dispatch({ type: UPDATE_BOARD, payload: board });\r\n    nextTurn();\r\n  };\r\n\r\n  const playerEndGame = () => dispatch({ type: END_GAME });\r\n\r\n  return (\r\n    <boardContext.Provider\r\n      value={{\r\n        ...state,\r\n        resetBoard,\r\n        updateBoard,\r\n        playerEndGame\r\n      }}>\r\n      {props.children}\r\n    </boardContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BoardState;\r\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport BoardState from './context/board/BoardState';\n\nconst App = () => {\n  return (\n    <BoardState>\n      <div className='App'>\n        <header></header>\n        <Board />\n      </div>\n    </BoardState>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}